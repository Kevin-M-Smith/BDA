valuesIndex
chunk
value
if(value)
print("TRUE")
length(value)
function (obs_url)
{
#   h <- basicHeaderGatherer()
#   doc = tryCatch({
#     returnedDoc <- getURI(obs_url, headerfunction = h$update)
#     if (h$value()["Content-Type"] == "text/xml;charset=UTF-8") {
#       xmlTreeParse(returnedDoc, getDTD = FALSE, useInternalNodes = TRUE)
#     }
#     else {
#       message(paste("URL caused an error:", obs_url))
#       message("Content-Type=", h$value()["Content-Type"])
#       return(NA)
#     }
#   }, warning = function(w) {
#     message(paste("URL caused a warning:", obs_url))
#     message(w)
#   }, error = function(e) {
#     message(paste("URL does not seem to exist:", obs_url))
#     message(e)
#     return(NA)
#   })
doc <- xmlRoot(doc)
ns <- xmlNamespaceDefinitions(doc, simplify = TRUE)
timeSeries <- xpathApply(doc, "//ns1:timeSeries", namespaces = ns)
for (i in 1:length(timeSeries)) {
chunk <- xmlDoc(timeSeries[[i]])
chunk <- xmlRoot(chunk)
chunkNS <- xmlNamespaceDefinitions(chunk, simplify = TRUE)
site <- as.character(xpathApply(chunk, "ns1:sourceInfo/ns1:siteCode",
namespaces = chunkNS, xmlValue))
agency <- as.character(xpathApply(chunk, "ns1:sourceInfo/ns1:siteCode/@agencyCode",
namespaces = chunkNS))
pCode <- as.character(xpathApply(chunk, "ns1:variable/ns1:variableCode",
namespaces = chunkNS, xmlValue))
statCd <- as.character(xpathApply(chunk, "ns1:variable/ns1:options/ns1:option/@optionCode",
namespaces = chunkNS))
valuesIndex <- as.numeric(which("values" == names(chunk)))
zoneAbbrievs <- c(as.character(xpathApply(chunk, "ns1:sourceInfo/ns1:timeZoneInfo/ns1:defaultTimeZone/@zoneAbbreviation",
namespaces = chunkNS)), as.character(xpathApply(chunk,
"ns1:sourceInfo/ns1:timeZoneInfo/ns1:daylightSavingsTimeZone/@zoneAbbreviation",
namespaces = chunkNS)))
names(zoneAbbrievs) <- c(as.character(xpathApply(chunk,
"ns1:sourceInfo/ns1:timeZoneInfo/ns1:defaultTimeZone/@zoneOffset",
namespaces = chunkNS)), as.character(xpathApply(chunk,
"ns1:sourceInfo/ns1:timeZoneInfo/ns1:daylightSavingsTimeZone/@zoneOffset",
namespaces = chunkNS)))
for (j in valuesIndex) {
subChunk <- xmlRoot(xmlDoc(chunk[[j]]))
methodID <- as.character(xpathSApply(subChunk, "ns1:method/@methodID",
namespaces = chunkNS))
methodID <- padVariable(methodID, 2)
value <- as.numeric(xpathSApply(subChunk, "ns1:value",
namespaces = chunkNS, xmlValue))
if (length(value)!=0){
datetime <- as.POSIXct(strptime(xpathSApply(subChunk,
"ns1:value/@dateTime", namespaces = chunkNS),
"%Y-%m-%dT%H:%M:%S"))
tzHours <- substr(xpathSApply(subChunk, "ns1:value/@dateTime",
namespaces = chunkNS), 24, nchar(xpathSApply(subChunk,
"ns1:value/@dateTime", namespaces = chunkNS)))
if (mean(nchar(tzHours), rm.na = TRUE) == 6) {
tzAbbriev <- zoneAbbrievs[tzHours]
}
else {
tzAbbriev <- rep(as.character(zoneAbbrievs[1]),
length(datetime))
}
timeZoneLibrary <- setNames(c("America/New_York",
"America/New_York", "America/Chicago", "America/Chicago",
"America/Denver", "America/Denver", "America/Los_Angeles",
"America/Los_Angeles", "America/Anchorage", "America/Anchorage",
"America/Honolulu", "America/Honolulu"), c("EST",
"EDT", "CST", "CDT", "MST", "MDT", "PST", "PDT",
"AKST", "AKDT", "HAST", "HST"))
timeZone <- as.character(timeZoneLibrary[tzAbbriev])
if (length(unique(timeZone)) == 1) {
datetime <- as.POSIXct(as.character(datetime),
tz = unique(timeZone))
}
else {
warning("Mixed time zone information")
for (i in seq_along(datetime)) {
datetime[i] <- as.POSIXct(as.character(datetime[i]),
tz = timeZone[i])
}
}
qualifier <- as.character(xpathSApply(subChunk, "ns1:value/@qualifiers",
namespaces = chunkNS))
valueName <- paste(methodID, pCode, statCd, sep = "_")
qualName <- paste(methodID, pCode, statCd, "cd",
sep = "_")
valueName <- paste("X", valueName, sep = "")
qualName <- paste("X", qualName, sep = "")
assign(valueName, value)
assign(qualName, qualifier)
if (length(get(qualName)) != 0) {
df <- data.frame(rep(agency, length(datetime)),
rep(site, length(datetime)), datetime, tzAbbriev,
get(valueName), get(qualName), stringsAsFactors = FALSE)
names(df) <- c("agency_cd", "site_no", "datetime",
"tz_cd", valueName, qualName)
}
else {
df <- data.frame(rep(agency, length(datetime)),
rep(site, length(datetime)), datetime, tzAbbriev,
get(valueName), stringsAsFactors = FALSE)
names(df) <- c("agency_cd", "site_no", "datetime",
"tz_cd", valueName)
}
if (1 == i & valuesIndex[1] == j) {
mergedDF <- df
}
else {
similarNames <- intersect(names(mergedDF), names(df))
mergedDF <- merge(mergedDF, df, by = similarNames,
all = TRUE)
}
}
}
}
}
doc <- xmlRoot(doc)
ns <- xmlNamespaceDefinitions(doc, simplify = TRUE)
timeSeries <- xpathApply(doc, "//ns1:timeSeries", namespaces = ns)
for (i in 1:length(timeSeries)) {
chunk <- xmlDoc(timeSeries[[i]])
chunk <- xmlRoot(chunk)
chunkNS <- xmlNamespaceDefinitions(chunk, simplify = TRUE)
site <- as.character(xpathApply(chunk, "ns1:sourceInfo/ns1:siteCode",
namespaces = chunkNS, xmlValue))
agency <- as.character(xpathApply(chunk, "ns1:sourceInfo/ns1:siteCode/@agencyCode",
namespaces = chunkNS))
pCode <- as.character(xpathApply(chunk, "ns1:variable/ns1:variableCode",
namespaces = chunkNS, xmlValue))
statCd <- as.character(xpathApply(chunk, "ns1:variable/ns1:options/ns1:option/@optionCode",
namespaces = chunkNS))
valuesIndex <- as.numeric(which("values" == names(chunk)))
zoneAbbrievs <- c(as.character(xpathApply(chunk, "ns1:sourceInfo/ns1:timeZoneInfo/ns1:defaultTimeZone/@zoneAbbreviation",
namespaces = chunkNS)), as.character(xpathApply(chunk,
"ns1:sourceInfo/ns1:timeZoneInfo/ns1:daylightSavingsTimeZone/@zoneAbbreviation",
namespaces = chunkNS)))
names(zoneAbbrievs) <- c(as.character(xpathApply(chunk,
"ns1:sourceInfo/ns1:timeZoneInfo/ns1:defaultTimeZone/@zoneOffset",
namespaces = chunkNS)), as.character(xpathApply(chunk,
"ns1:sourceInfo/ns1:timeZoneInfo/ns1:daylightSavingsTimeZone/@zoneOffset",
namespaces = chunkNS)))
for (j in valuesIndex) {
subChunk <- xmlRoot(xmlDoc(chunk[[j]]))
methodID <- as.character(xpathSApply(subChunk, "ns1:method/@methodID",
namespaces = chunkNS))
methodID <- padVariable(methodID, 2)
value <- as.numeric(xpathSApply(subChunk, "ns1:value",
namespaces = chunkNS, xmlValue))
if (length(value)!=0){
datetime <- as.POSIXct(strptime(xpathSApply(subChunk,
"ns1:value/@dateTime", namespaces = chunkNS),
"%Y-%m-%dT%H:%M:%S"))
tzHours <- substr(xpathSApply(subChunk, "ns1:value/@dateTime",
namespaces = chunkNS), 24, nchar(xpathSApply(subChunk,
"ns1:value/@dateTime", namespaces = chunkNS)))
if (mean(nchar(tzHours), rm.na = TRUE) == 6) {
tzAbbriev <- zoneAbbrievs[tzHours]
}
else {
tzAbbriev <- rep(as.character(zoneAbbrievs[1]),
length(datetime))
}
timeZoneLibrary <- setNames(c("America/New_York",
"America/New_York", "America/Chicago", "America/Chicago",
"America/Denver", "America/Denver", "America/Los_Angeles",
"America/Los_Angeles", "America/Anchorage", "America/Anchorage",
"America/Honolulu", "America/Honolulu"), c("EST",
"EDT", "CST", "CDT", "MST", "MDT", "PST", "PDT",
"AKST", "AKDT", "HAST", "HST"))
timeZone <- as.character(timeZoneLibrary[tzAbbriev])
if (length(unique(timeZone)) == 1) {
datetime <- as.POSIXct(as.character(datetime),
tz = unique(timeZone))
}
else {
warning("Mixed time zone information")
for (i in seq_along(datetime)) {
datetime[i] <- as.POSIXct(as.character(datetime[i]),
tz = timeZone[i])
}
}
qualifier <- as.character(xpathSApply(subChunk, "ns1:value/@qualifiers",
namespaces = chunkNS))
valueName <- paste(methodID, pCode, statCd, sep = "_")
qualName <- paste(methodID, pCode, statCd, "cd",
sep = "_")
valueName <- paste("X", valueName, sep = "")
qualName <- paste("X", qualName, sep = "")
assign(valueName, value)
assign(qualName, qualifier)
if (length(get(qualName)) != 0) {
df <- data.frame(rep(agency, length(datetime)),
rep(site, length(datetime)), datetime, tzAbbriev,
get(valueName), get(qualName), stringsAsFactors = FALSE)
names(df) <- c("agency_cd", "site_no", "datetime",
"tz_cd", valueName, qualName)
}
else {
df <- data.frame(rep(agency, length(datetime)),
rep(site, length(datetime)), datetime, tzAbbriev,
get(valueName), stringsAsFactors = FALSE)
names(df) <- c("agency_cd", "site_no", "datetime",
"tz_cd", valueName)
}
if (1 == i & valuesIndex[1] == j) {
mergedDF <- df
}
else {
similarNames <- intersect(names(mergedDF), names(df))
mergedDF <- merge(mergedDF, df, by = similarNames,
all = TRUE)
}
}
}
}
return(mergedDF)
chunk
doc <- xmlRoot(doc)
ns <- xmlNamespaceDefinitions(doc, simplify = TRUE)
timeSeries <- xpathApply(doc, "//ns1:timeSeries", namespaces = ns)
for (i in 1:length(timeSeries)) {
chunk <- xmlDoc(timeSeries[[i]])
chunk <- xmlRoot(chunk)
chunkNS <- xmlNamespaceDefinitions(chunk, simplify = TRUE)
site <- as.character(xpathApply(chunk, "ns1:sourceInfo/ns1:siteCode",
namespaces = chunkNS, xmlValue))
agency <- as.character(xpathApply(chunk, "ns1:sourceInfo/ns1:siteCode/@agencyCode",
namespaces = chunkNS))
pCode <- as.character(xpathApply(chunk, "ns1:variable/ns1:variableCode",
namespaces = chunkNS, xmlValue))
statCd <- as.character(xpathApply(chunk, "ns1:variable/ns1:options/ns1:option/@optionCode",
namespaces = chunkNS))
valuesIndex <- as.numeric(which("values" == names(chunk)))
zoneAbbrievs <- c(as.character(xpathApply(chunk, "ns1:sourceInfo/ns1:timeZoneInfo/ns1:defaultTimeZone/@zoneAbbreviation",
namespaces = chunkNS)), as.character(xpathApply(chunk,
"ns1:sourceInfo/ns1:timeZoneInfo/ns1:daylightSavingsTimeZone/@zoneAbbreviation",
namespaces = chunkNS)))
names(zoneAbbrievs) <- c(as.character(xpathApply(chunk,
"ns1:sourceInfo/ns1:timeZoneInfo/ns1:defaultTimeZone/@zoneOffset",
namespaces = chunkNS)), as.character(xpathApply(chunk,
"ns1:sourceInfo/ns1:timeZoneInfo/ns1:daylightSavingsTimeZone/@zoneOffset",
namespaces = chunkNS)))
for (j in valuesIndex) {
subChunk <- xmlRoot(xmlDoc(chunk[[j]]))
methodID <- as.character(xpathSApply(subChunk, "ns1:method/@methodID",
namespaces = chunkNS))
methodID <- padVariable(methodID, 2)
value <- as.numeric(xpathSApply(subChunk, "ns1:value",
namespaces = chunkNS, xmlValue))
#      if (length(value)!=0){
datetime <- as.POSIXct(strptime(xpathSApply(subChunk,
"ns1:value/@dateTime", namespaces = chunkNS),
"%Y-%m-%dT%H:%M:%S"))
tzHours <- substr(xpathSApply(subChunk, "ns1:value/@dateTime",
namespaces = chunkNS), 24, nchar(xpathSApply(subChunk,
"ns1:value/@dateTime", namespaces = chunkNS)))
if (mean(nchar(tzHours), rm.na = TRUE) == 6) {
tzAbbriev <- zoneAbbrievs[tzHours]
}
else {
tzAbbriev <- rep(as.character(zoneAbbrievs[1]),
length(datetime))
}
timeZoneLibrary <- setNames(c("America/New_York",
"America/New_York", "America/Chicago", "America/Chicago",
"America/Denver", "America/Denver", "America/Los_Angeles",
"America/Los_Angeles", "America/Anchorage", "America/Anchorage",
"America/Honolulu", "America/Honolulu"), c("EST",
"EDT", "CST", "CDT", "MST", "MDT", "PST", "PDT",
"AKST", "AKDT", "HAST", "HST"))
timeZone <- as.character(timeZoneLibrary[tzAbbriev])
if (length(unique(timeZone)) == 1) {
datetime <- as.POSIXct(as.character(datetime),
tz = unique(timeZone))
}
else {
warning("Mixed time zone information")
for (i in seq_along(datetime)) {
datetime[i] <- as.POSIXct(as.character(datetime[i]),
tz = timeZone[i])
}
}
qualifier <- as.character(xpathSApply(subChunk, "ns1:value/@qualifiers",
namespaces = chunkNS))
valueName <- paste(methodID, pCode, statCd, sep = "_")
qualName <- paste(methodID, pCode, statCd, "cd",
sep = "_")
valueName <- paste("X", valueName, sep = "")
qualName <- paste("X", qualName, sep = "")
assign(valueName, value)
assign(qualName, qualifier)
if (length(get(qualName)) != 0) {
df <- data.frame(rep(agency, length(datetime)),
rep(site, length(datetime)), datetime, tzAbbriev,
get(valueName), get(qualName), stringsAsFactors = FALSE)
names(df) <- c("agency_cd", "site_no", "datetime",
"tz_cd", valueName, qualName)
}
else {
df <- data.frame(rep(agency, length(datetime)),
rep(site, length(datetime)), datetime, tzAbbriev,
get(valueName), stringsAsFactors = FALSE)
names(df) <- c("agency_cd", "site_no", "datetime",
"tz_cd", valueName)
}
if (1 == i & valuesIndex[1] == j) {
mergedDF <- df
}
else {
similarNames <- intersect(names(mergedDF), names(df))
mergedDF <- merge(mergedDF, df, by = similarNames,
all = TRUE)
}
}
#    }
}
return(mergedDF)
chunk
detach(dataRetreival)
detach("package:dataRetrieval", unload=TRUE)
remove.packages("dataRetrieval")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install_github("Kevin-M-Smith/dataRetrieval")
df2 <- getWaterML1Data(url)
library(dataRetrieval)
url = "http://waterservices.usgs.gov/nwis/iv/?format=waterml,1.1&huc=02&startDT=2014-10-11T00:00:00.000&endDT=2014-10-11T00:30:00.000&parameterCd=00060,00065"
df2 <- getWaterML1Data(url)
df2
View(df2)
getWaterML1Data.r
getWaterML1Data
remove.packages("dataRetrieval")
install_github("Kevin-M-Smith/dataRetrieval")
library(devtools)
install_github("Kevin-M-Smith/dataRetrieval")
df2
df3 <- getWaterML1("http://waterservices.usgs.gov/nwis/iv/?format=waterml,1.1&sites=01647600,01653000&startDT=2014-10-11T00:00:00.000&endDT=2014-10-11T00:30:00.000&parameterCd=00060,00065")
df3 <- getWaterML1Data("http://waterservices.usgs.gov/nwis/iv/?format=waterml,1.1&sites=01647600,01653000&startDT=2014-10-11T00:00:00.000&endDT=2014-10-11T00:30:00.000&parameterCd=00060,00065")
url = "http://waterservices.usgs.gov/nwis/iv/?format=waterml,1.1&huc=02&startDT=2014-10-11T00:00:00.000&endDT=2014-10-11T00:30:00.000&parameterCd=00060,00065"
df2 <- getWaterML1Data(url)
library(dataRetrieval)
url = "http://waterservices.usgs.gov/nwis/iv/?format=waterml,1.1&huc=02&startDT=2014-10-11T00:00:00.000&endDT=2014-10-11T00:30:00.000&parameterCd=00060,00065"
df2 <- getWaterML1Data(url)
df3 <- getWaterML1Data("http://waterservices.usgs.gov/nwis/iv/?format=waterml,1.1&sites=01647600,01653000&startDT=2014-10-11T00:00:00.000&endDT=2014-10-11T00:30:00.000&parameterCd=00060,00065")
View(df3)
getNWISSites
getNWISSites()
getNWISPcodeInfo
getNWISPcodeInfo("00060")
getNWISInfo
getNWISInfo("01647600")
getNWISInfo
df3 <- getWaterML2Data(url)
getWaterML2
getWaterML1
##############################
# ACF AND PACF GGPLOT STYLE
##############################
# ggacf <- function(x){
#   gacf = acf(x, plot=FALSE, lag.max=120)
#   gacf.df = with(gacf, data.frame(lag, acf))
#   gacf.df$sig = qnorm((1 + 0.95)/2)/sqrt(length(x))
#
#   q <- ggplot(data = gacf.df, mapping = aes(x = lag, y = acf))
#   q = q + xlim(c(0,120))
#   q = q + geom_hline(aes(yintercept = 0))
#   q = q + geom_segment(mapping = aes(xend = lag), yend = 0)
#   q = q + theme_bw()
#   q = q + geom_hline(aes(yintercept = c(sig,-1*sig)), linetype=2)
#   q = q + ylab("$\\rho_k$")
#   q = q + xlab("lag, $k$")
# }
#
# ggpacf <- function(x){
#   gacf = pacf(x, plot=FALSE, lag.max=120)
#   gacf.df = with(gacf, data.frame(lag, acf))
#   gacf.df$sig = qnorm((1 + 0.95)/2)/sqrt(length(x))
#
#   q <- ggplot(data = gacf.df, mapping = aes(x = lag, y = acf))
#   q = q + xlim(c(0,120))
#   q = q + geom_hline(aes(yintercept = 0))
#   q = q + geom_segment(mapping = aes(xend = lag), yend = 0)
#   q = q + theme_bw()
#   q = q + geom_hline(aes(yintercept=c(sig,-1*sig)), linetype=2)
#   q = q + ylab("$\\alpha_k$")
#   q = q + xlab("lag, $k$")
# }
ggacf <- function(x){
gacf = acf(x, plot=FALSE, lag.max=120)
gacf.df = with(gacf, data.frame(lag, acf))
gacf.df$sig = qnorm((1 + 0.95)/2)/sqrt(length(x))
q <- ggplot(data = gacf.df, mapping = aes(x = lag, y = acf))
q = q + xlim(c(0,120))
q = q + geom_hline(aes(yintercept = 0))
q = q + geom_segment(mapping = aes(xend = lag), yend = 0)
q = q + theme_bw()
q = q + geom_hline(aes(yintercept = c(sig,-1*sig)), linetype=2)
q = q + ylab(expression(rho[k]))
q = q + xlab("lag k")
}
ggpacf <- function(x){
gacf = pacf(x, plot=FALSE, lag.max=120)
gacf.df = with(gacf, data.frame(lag, acf))
gacf.df$sig = qnorm((1 + 0.95)/2)/sqrt(length(x))
q <- ggplot(data = gacf.df, mapping = aes(x = lag, y = acf))
q = q + xlim(c(0,120))
q = q + geom_hline(aes(yintercept = 0))
q = q + geom_segment(mapping = aes(xend = lag), yend = 0)
q = q + theme_bw()
q = q + geom_hline(aes(yintercept=c(sig,-1*sig)), linetype=2)
q = q + ylab(expression(alpha[k]))
q = q + xlab("lag k")
q
}
ggacf.th <- function(x, th){
gacf = acf(x, plot=FALSE, lag.max=120)
gacf.df = with(gacf, data.frame(lag, acf))
gacf.df$sig = qnorm((1 + 0.95)/2)/sqrt(length(x))
gacf.th = with(gacf, data.frame(lag, acf = test))
rownames(gacf.th) <- seq(0, 120)
q <- ggplot(data = gacf.df, mapping = aes(x = lag, y = acf))
q = q + xlim(c(0,120))
q = q + geom_hline(aes(yintercept = 0))
q = q + geom_segment(data = gacf.df, mapping = aes(xend = lag), yend = 0, lwd=1)
q = q + theme_bw()
q = q + geom_hline(aes(yintercept = c(sig,-1*sig)), linetype=2)
q = q + ylab(expression(rho[k]))
q = q + geom_segment(mapping = aes(y = 0, yend = gacf.th$acf,
x = gacf.th$lag + 0.2,
xend = gacf.th$lag + 0.2), lwd = 1, color="red")
#  q = q + geom_segment(data = gacf.th,
#                       mapping = aes(y = 0, yend = test, x = lag + 0.2, xend = lag + 0.2), fill = "red")
q = q + xlab("lag k")
q
}
source("src/libs.R")        # IMPORT LIBRARIES
source("src/ganges.R")      # IMPORT GANGES DATA
source("src/gacf.R")        # IMPORT ACF FUNCTIONS
source("src/table.R")
setwd("~/Desktop/BDA/Time Series Analysis")
source("src/libs.R")        # IMPORT LIBRARIES
source("src/ganges.R")      # IMPORT GANGES DATA
source("src/gacf.R")        # IMPORT ACF FUNCTIONS
source("src/table.R")
tsd = diff(dfg$Flow, 12)
tsd = data.frame(value = tsd, idx = dfg$idx[-1:-12])
tsd.fit = auto.arima(tsd$value, stepwise=FALSE, trace=TRUE)
ggpacf.th(x = tsd$value, fit = tsd.fit)
x = tsd$value
fit = tsd.fit
coefs = coef(fit)
ar = grep("ar", names(coefs))
ma = grep("ma", names(coefs))
theory <- ARMAacf(ar = coefs[ar], ma = coefs[ma], lag.max=120)
gacf = acf(x, plot=FALSE, lag.max=120)
gacf.df = with(gacf, data.frame(lag, acf))
gacf.df$sig = qnorm((1 + 0.95)/2)/sqrt(length(x))
gacf.th = with(gacf, data.frame(lag, acf = theory))
rownames(gacf.th) <- seq(0, 120)
q <- ggplot(data = gacf.df, mapping = aes(x = lag, y = acf))
q = q + xlim(c(0,120))
q = q + geom_hline(aes(yintercept = 0))
q = q + geom_segment(data = gacf.df, mapping = aes(xend = lag), yend = 0, lwd=1)
q = q + theme_bw()
q = q + geom_hline(aes(yintercept = c(sig,-1*sig)), linetype=2)
q = q + ylab(expression(rho[k]))
q = q + geom_segment(mapping = aes(y = 0, yend = gacf.th$acf,
x = gacf.th$lag + 0.2,
xend = gacf.th$lag + 0.2), lwd = 1, color="red")
q = q + xlab("lag k")
q
source("src/ganges.R")      # IMPORT GANGES DATA
source("src/gacf.R")        # IMPORT ACF FUNCTIONS
tsd = diff(dfg$Flow, 12)
tsd = data.frame(value = tsd, idx = dfg$idx[-1:-12])
tsd.fit = auto.arima(tsd$value, stepwise=FALSE, trace=TRUE)
ggpacf.th(x = tsd$value, fit = tsd.fit)
x = tsd$value
fit = tsd.fit
coefs = coef(fit)
ar = grep("ar", names(coefs))
ma = grep("ma", names(coefs))
theory <- ARMAacf(ar = coefs[ar], ma = coefs[ma], lag.max=120, pacf = TRUE)
gacf = pacf(x, plot=FALSE, lag.max=120)
gacf.df = with(gacf, data.frame(lag, acf))
gacf.df$sig = qnorm((1 + 0.95)/2)/sqrt(length(x))
gacf.th = with(gacf, data.frame(lag, acf = theory))
q <- ggplot(data = gacf.df, mapping = aes(x = lag, y = acf))
gacf.th
q = q + xlim(c(0,120))
q = q + geom_hline(aes(yintercept = 0))
q = q + geom_segment(data = gacf.df, mapping = aes(xend = lag), yend = 0, lwd=1)
q = q + theme_bw()
q = q + geom_hline(aes(yintercept = c(sig,-1*sig)), linetype=2)
q = q + ylab(expression(rho[k]))
q = q + geom_segment(mapping = aes(y = 0, yend = gacf.th$acf,
x = gacf.th$lag + 0.2,
xend = gacf.th$lag + 0.2), lwd = 1, color="red")
q = q + xlab("lag k")
q
warnings()
